from syntax import Highlighter, bind

class LinkerScriptHighlighter(Highlighter):
    name = "ld"
    extensions = ('.ld',)
    spaces = False

    keywords = [
        'INCLUDE','INPUT','GROUP','AS_NEEDED','OUTPUT','SEARCH_DIR',
        'STARTUP','TARGET','REGION_ALIAS','ASSERT',
        'EXTERN','FORCE_COMMON_ALLOCATION','INHIBIT_COMMON_ALLOCATION',
        'FORCE_GROUP_ALLOCATION','INSERT','AFTER','BEFORE',
        'NOCROSSREFS','NOCROSSREFS_TO','OUTPUT_ARCH','LD_FEATURE',
        'HIDDEN','PROVIDE','PROVIDE_HIDDEN','SECTIONS','EXCLUDE_FILE',
        'SORT_BY_NAME','SORT_BY_ALIGNMENT','KEEP','ENTRY','BLOCK','ALIGN',
        'COMMON','DISCARD'
        # Special:
        # 'OUTPUT_FORMAT',
    ]

    types = [
        'BYTE','LONG','SHORT','QUAD'
    ]

    bfd_names = [
        'elf64-x86-64','elf32-i386',
    ]

    def paintCComment(self):
        let last = None
        while self[0] != None:
            if self.commentBuzzwords(): continue
            else if last == '*' and self[0] == '/':
                self.paint(1, self.FLAG_COMMENT)
                return 0
            else:
                last = self[0]
                self.paint(1, self.FLAG_COMMENT)
        return 1

    def whitespaceThen(self, c):
        while self[0] == ' ':
            self.skip()
        return self[0] == c

    def bfdName(self, c):
        return self.cKeywordQualifier(c) or c == '-'

    def calculate(self):
        let cond = self.state
        if cond <= 0:
            while self[0] is not None:
                if self[0] == '/' and self[1] == '*':
                    self.paint(2, self.FLAG_COMMENT)
                    return self.paintCComment()
                else if self.matchAndPaint("OUTPUT_FORMAT", self.FLAG_KEYWORD, self.cKeywordQualifier):
                    # Expect an argument
                    if not self.whitespaceThen('('):
                        self.paint(-1, self.FLAG_ERROR)
                        return None
                    self.skip(1)
                    # A BFD name
                    if not self.findKeywords(self.bfd_names, self.FLAG_TYPE, self.bfdName):
                        while self[0] is not None and self[0] != ',' and self[0] != ')':
                            self.skip()
                    if not (self.whitespaceThen(',') or self.whitespaceThen(')')):
                        self.paint(-1, self.FLAG_ERROR)
                        return None
                    if self[0] == ')':
                        self.skip()
                        continue
                    else:
                        self.skip() # comma
                    if not self.findKeywords(self.bfd_names, self.FLAG_TYPE, self.bfdName):
                        while self[0] is not None and self[0] != ',' and self[0] != ')':
                            self.skip()
                    if not self.whitespaceThen(','):
                        self.paint(-1, self.FLAG_ERROR)
                        return None
                    self.skip() # comma
                    if not self.findKeywords(self.bfd_names, self.FLAG_TYPE, self.bfdName):
                        while self[0] is not None and self[0] != ',' and self[0] != ')':
                            self.skip()
                    if not self.whitespaceThen(')'):
                        self.paint(-1, self.FLAG_ERROR)
                        return None
                    self.skip() # ')'
                else if self.findKeywords(self.keywords, self.FLAG_KEYWORD, self.cKeywordQualifier):
                    return 0
                else if self.findKeywords(self.types, self.FLAG_TYPE, self.cKeywordQualifier):
                    return 0
                else if self[0] == '.' and self.cKeywordQualifier(self[1]):
                    self.paint(2,self.FLAG_TYPE)
                    while self.cKeywordQualifier(self[0]) or self[0] == '-':
                        self.paint(1,self.FLAG_TYPE)
                else if not self.cKeywordQualifier(self[-1]) and self.isdigit(self[0]):
                    if self[0] == '0' and self[1] == 'x':
                        self.paint(2,self.FLAG_NUMERAL)
                        while self[0] in '0123456789abcdefABCDEF':
                            self.paint(1,self.FLAG_NUMERAL)
                    else if self[0] == '0':
                        self.paint(1,self.FLAG_NUMERAL)
                        while self[0] in '01234567':
                            self.paint(1,self.FLAG_NUMERAL)
                    else:
                        self.paint(1,self.FLAG_NUMERAL)
                        while self.isdigit(self[0]):
                            self.paint(1,self.FLAG_NUMERAL)
                    if self[0] in 'kKM':
                        self.paint(1, self.FLAG_NUMERAL)
                else if self[0] is not None:
                    self.skip()
        else if cond == 1:
            return self.paintCComment()
        return None

bind(LinkerScriptHighlighter)
