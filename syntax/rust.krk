from syntax import Highlighter, bind
from syntax.c import CHighlighter

@bind
class RustHighlighter(Highlighter):
    name = 'rust'
    extensions = ('.rs',)
    keywords = [
        "as","break","const","continue","crate","else","enum","extern",
        "false","fn","for","if","impl","in","let","loop","match","mod",
        "move","mut","pub","ref","return","Self","self","static","struct",
        "super","trait","true","type","unsafe","use","where","while",
    ]
    types = [
        "bool","char","str",
        "i8","i16","i32","i64",
        "u8","u16","u32","u64",
        "isize","usize",
        "f32","f64",
    ]
    def paintRustComment():
        while self[0]:
            if self.commentBuzzwords(): continue
            else if self[0] == '*' and self[1] == '/':
                self.paint(2, self.FLAG_COMMENT)
                self << self.state - 1
                if self.state == 0: return 0
            else if self[0] == '/' and self[1] == '*':
                self << self.state + 1
                self.paint(2, self.FLAG_COMMENT)
            else:
                self.paint(1, self.FLAG_COMMENT)
        return self.state
    def paintRustNumeral():
        if self[0] == '0' and self[1] == 'b':
            self.paint(2, self.FLAG_NUMERAL)
            while self[0] == '0' or self[0] == '1' or self[0] == '_':
                self.paint(1, self.FLAG_NUMERAL)
        else if self[0] == '0' and self[1] == 'o':
            self.paint(2, self.FLAG_NUMERAL)
            while (ord(self[0]) >= ord('0') and ord(self[0]) < ord('7')) or self[0] == '_':
                self.paint(1, self.FLAG_NUMERAL)
        else if self[0] == '0' and self[1] == 'x':
            self.paint(2, self.FLAG_NUMERAL)
            while self.isxdigit(self[0]) or self[0] == '_':
                self.paint(1, self.FLAG_NUMERAL)
        else if self[0] == '0' and self[1] == '.':
            self.paint(2, self.FLAG_NUMERAL)
            while self.isdigit(self[0]) or self[0] == '_':
                self.paint(1, self.FLAG_NUMERAL)
        else:
            while self.isdigit(self[0]) or self[0] == '_':
                self.paint(1, self.FLAG_NUMERAL)
            if self[0] == '.':
                self.paint(1, self.FLAG_NUMERAL)
                while self.isdigit(self[0]) or self[0] == '_':
                    self.paint(1, self.FLAG_NUMERAL)
        return 0
    def calculate():
        if self.state == -1 or self.state == 0:
            if self[0] == '/' and self[1] == '/':
                self.paintComment()
            else if self[0] == '/' and self[1] == '*':
                self.paint(2, self.FLAG_COMMENT)
                self.state = 1
                return self.paintRustComment()
            else if self.findKeywords(self.keywords, self.FLAG_KEYWORD, self.cKeywordQualifier):
                return 0
            else if self.findKeywords(self.types, self.FLAG_TYPE, self.cKeywordQualifier):
                return 0
            else if self[0] == '\"':
                self.paintSimpleString()
                return 0
            else if self[0] == '\'' and self[1] == 's' and self[2] == 't':
                self.paint(1, self.FLAG_TYPE)
                return 0
            else if self[0] == '\'':
                CHighlighter.paintCChar(self)
                return 0
            else if not self.cKeywordQualifier(self[-1]) and self.isdigit(self[0]):
                self.paintRustNumeral()
                return 0
            else if self[0]:
                self.skip()
                return 0
        else:
            return self.paintRustComment()
