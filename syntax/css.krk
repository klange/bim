from bim import highlighter, flags

let htmlElements = [
    "a","abbr","address","area","article","aside","audio",
    "b","base","bdi","bdo","blockquote","body","br","button",
    "canvas","cite","code","col","colgroup","data","datalist",
    "dd","del","details","dfn","dialog","div","dl","dt","em",
    "embed","fieldset","figcaption","figure","footer","form",
    "h1","h2","h3","h4","h5","h6","head","header","hr","html",
    "i","iframe","img","input","ins","kbd","label","legend",
    "li","link","main","map","mark","meta","meter","nav",
    "noscript","object","ol","optgroup","option","output",
    "p","param","picture","pre","progress","q","rp","rt",
    "ruby","s","samp","script","section","select","small",
    "source","span","strong","style","sub","summary","sup",
    "svg","table","tbody","td","template","textarea","tfoot",
    "th","thead","time","title","tr","track","u","ul","var",
    "video","wbr","hgroup","*"
]

let cssProperties = [
    "align-content","align-items","align-self","all","animation",
    "animation-delay","animation-direction","animation-duration",
    "animation-fill-mode","animation-iteration-count","animation-name",
    "animation-play-state","animation-timing-function","backface-visibility",
    "background","background-attachment","background-blend-mode","background-clip",
    "background-color","background-image","background-origin","background-position",
    "background-repeat","background-size","border","border-bottom","border-bottom-color",
    "border-bottom-left-radius","border-bottom-right-radius","border-bottom-style",
    "border-bottom-width","border-collapse","border-color","border-image","border-image-outset",
    "border-image-repeat","border-image-slice","border-image-source","border-image-width",
    "border-left","border-left-color","border-left-style","border-left-width",
    "border-radius","border-right","border-right-color","border-right-style","border-right-width",
    "border-spacing","border-style","border-top","border-top-color","border-top-left-radius",
    "border-top-right-radius","border-top-style","border-top-width","border-width",
    "bottom","box-decoration-break","box-shadow","box-sizing","break-after",
    "break-before","break-inside","caption-side","caret-color","@charset",
    "clear","clip","color","column-count","column-fill","column-gap","column-rule","column-rule-color",
    "column-rule-style","column-rule-width","column-span","column-width","columns","content",
    "counter-increment","counter-reset","cursor","direction","display","empty-cells",
    "filter","flex","flex-basis","flex-direction","flex-flow","flex-grow","flex-shrink",
    "flex-wrap","float","font","@font-face","font-family","font-feature-settings","@font-feature-values",
    "font-kerning","font-language-override","font-size","font-size-adjust","font-stretch","font-style",
    "font-synthesis","font-variant","font-variant-alternates","font-variant-caps","font-variant-east-asian",
    "font-variant-ligatures","font-variant-numeric","font-variant-position","font-weight",
    "grid","grid-area","grid-auto-columns","grid-auto-flow","grid-auto-rows","grid-column",
    "grid-column-end","grid-column-gap","grid-column-start","grid-gap","grid-row","grid-row-end",
    "grid-row-gap","grid-row-start","grid-template","grid-template-areas","grid-template-columns",
    "grid-template-rows","hanging-punctuation","height","hyphens","image-rendering","@import",
    "isolation","justify-content","@keyframes","left","letter-spacing","line-break","line-height",
    "list-style","list-style-image","list-style-position","list-style-type","margin","margin-bottom",
    "margin-left","margin-right","margin-top","max-height","max-width","@media","min-height",
    "min-width","mix-blend-mode","object-fit","object-position","opacity","order","orphans",
    "outline","outline-color","outline-offset","outline-style","outline-width","overflow",
    "overflow-wrap","overflow-x","overflow-y","padding","padding-bottom","padding-left","padding-right",
    "padding-top","page-break-after","page-break-before","page-break-inside","perspective",
    "perspective-origin","pointer-events","position","quotes","resize","right","scroll-behavior",
    "tab-size","table-layout","text-align","text-align-last","text-combine-upright","text-decoration",
    "text-decoration-color","text-decoration-line","text-decoration-style","text-indent","text-justify",
    "text-orientation","text-overflow","text-shadow","text-transform","text-underline-position",
    "top","transform","transform-origin","transform-style","transition","transition-delay",
    "transition-duration","transition-property","transition-timing-function","unicode-bidi",
    "user-select","vertical-align","visibility","white-space","widows","width","word-break",
    "word-spacing","word-wrap","writing-mode"
]

let cssValues = [
    "inline","block","inline-block","none",
    "transparent","thin","dotted","sans-serif",
    "rgb","rgba","bold","italic","underline","context-box",
    "monospace","serif","sans-serif","pre-wrap",
    "relative","baseline","hidden","solid","inherit","normal",
    "button","pointer","border-box","default","textfield",
    "collapse","top","bottom","avoid","table-header-group",
    "middle","absolute","rect","left","center","right",
    "ellipsis","nowrap","table","both","uppercase","lowercase","help",
    "static","table-cell","table-column","scroll","touch","auto",
    "not-allowed","inset","url","fixed","translate","alpha","fixed","device-width",
    "table-row"
]

let cssStates = [
    "focus","active","hover","link","visited","before","after",
    "left","right","root","empty","target","enabled","disabled","checked","invalid",
    "first-child","nth-child","not","last-child"
]

let cssMatcher = lambda state, c: state.isalnum(c) or c == '-' or c == '@' or c == '*' or c == '!'

def matchPrefix(state, prefix):
    let i = 0
    for c in prefix:
        if c != state.charrel(i): return False
        if not state.charrel(i): return False
        i++
    return True

@highlighter('css',extensions=('.css',),spaces=True)
def syntax_css(state):
    if state.state < 1:
        if state.charat == '/' and state.nextchar == '*':
            return -1 # TODO paint C comment, need to import from c.krk?
        else if state.charat == '"':
            return -1 # Paint simple string
        else if state.lastchar != '.' and state.findKeywords(htmlElements, flags.FLAG_KEYWORD, cssMatcher):
            return 0
        else if state.lastchar != '.' and state.findKeywords(cssProperties, flags.FLAG_TYPE, cssMatcher):
            return 0
        for prefix in ['-moz-','-webkit-','-ms-','-o']:
            if matchPrefix(state,prefix):
                state.paint(len(prefix), flags.FLAG_ESCAPE)
                while state.charat and cssMatcher(state, state.charat):
                    state.paint(1, flags.FLAG_TYPE)
                return 0
        if state.charat == ':':
            state.skip()
            if state.findKeywords(cssStates, flags.FLAG_PRAGMA, cssMatcher):
                return 0
            while state.charat and state.charat != ';':
                if state.findKeywords(cssValues, flags.FLAG_NUMERAL, cssMatcher):
                    continue
                else if state.charat == '"':
                    # TODO paint simple string
                    continue
                else if state.charat == '{':
                    state.skip()
                    return 0
                else if state.charat == '#':
                    state.paint(1, flags.FLAG_NUMERAL)
                    while state.isxdigit(state.charat):
                        state.paint(1, flags.FLAG_NUMERAL)
                else if state.isdigit(state.charat):
                    while state.isdigit(state.charat):
                        state.paint(1, flags.FLAG_NUMERAL)
                    if state.charat == '.':
                        state.paint(1, flags.FLAG_NUMERAL)
                        while state.isdigit(state.charat):
                            state.paint(1, flags.FLAG_NUMERAL)
                    if state.charat == '%':
                        state.paint(1, flags.FLAG_NUMERAL)
                    else:
                        continue
                else if state.matchAndPaint("!important", flags.FLAG_PRAGMA, cssMatcher):
                    continue
                else if state.charat:
                    state.skip()
            return 0
        else if not state.charat:
            return -1
        else:
            state.skip()
        return 0
    else if state.state == 1:
        # continue C comment
        return -1
    return -1
