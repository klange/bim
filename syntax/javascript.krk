from syntax import Highlighter, bind
from syntax.c import CHighlighter

def makeit():
    let FLAG_NONE = Highlighter.FLAG_NONE
    let FLAG_KEYWORD = Highlighter.FLAG_KEYWORD
    let FLAG_STRING = Highlighter.FLAG_STRING
    let FLAG_COMMENT = Highlighter.FLAG_COMMENT
    let FLAG_TYPE = Highlighter.FLAG_TYPE
    let FLAG_PRAGMA = Highlighter.FLAG_PRAGMA
    let FLAG_NUMERAL = Highlighter.FLAG_NUMERAL
    let FLAG_ERROR = Highlighter.FLAG_ERROR
    let FLAG_DIFFPLUS = Highlighter.FLAG_DIFFPLUS
    let FLAG_DIFFMINUS = Highlighter.FLAG_DIFFMINUS
    let FLAG_NOTICE = Highlighter.FLAG_NOTICE
    let FLAG_BOLD = Highlighter.FLAG_BOLD
    let FLAG_LINK = Highlighter.FLAG_LINK
    let FLAG_ESCAPE = Highlighter.FLAG_ESCAPE
    let FLAG_EXTRA = Highlighter.FLAG_EXTRA
    let FLAG_SPECIAL = Highlighter.FLAG_SPECIAL
    let FLAG_UNDERLINE = Highlighter.FLAG_UNDERLINE
    class JavascriptHighlighter(Highlighter):
        name = 'javascript'
        extensions = ('.js','.jsx','.ts','.tsx')
        keywords = [
            "abstract","arguments","from",
            "await","break","case","catch","class","const",
            "continue","debugger","default","delete","do","else","enum","eval",
            "export","extends","final","finally","for","function","goto",
            "if","implements","import","in","instanceof","interface","let","long",
            "native","new","package","private","protected","public","return",
            "static","super","switch","synchronized","this","throw","throws",
            "transient","true","try","typeof","volatile","while","with","yield",
        ]
        types = [
            "int","float","double","short","var","void","byte","char","boolean",
        ]
        special = ['true','false','null']
        def paintJSFormatString():
            while self[0]:
                if '\\' in self and self[1] == '`':
                    self[2] = FLAG_ESCAPE
                else if '`' in self:
                    self[1] = FLAG_STRING
                    return 0
                else if '\\' in self:
                    self[2] = FLAG_ESCAPE
                else if '$' in self and self[1] == '{':
                    self[2] = FLAG_NUMERAL
                    while self[0] and self[0] != '}':
                        self[1] = FLAG_NUMERAL
                    self[1] = FLAG_NUMERAL
                else:
                    self[1] = FLAG_STRING
            return 1
        def calculate():
            if self.state < 1:
                while None not in self:
                    if not self.cKeywordQualifier(self[-1]) and self.isdigit(self[0]):
                        CHighlighter.paintCNumeral(self)
                    else if not self.cKeywordQualifier(self[-1]) and self[0] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':
                        while self[0] and self.cKeywordQualifier(self[0]):
                            self[1] = FLAG_TYPE
                    else if '/' in self and self[1] == '/':
                        self.paintComment()
                    else if '/' in self and self[1] == '*':
                        if CHighlighter.paintCComment(self) == 1: return 1
                    else if self.findKeywords(self.keywords, FLAG_KEYWORD, self.cKeywordQualifier):
                        continue
                    else if self.findKeywords(self.types, FLAG_TYPE, self.cKeywordQualifier):
                        continue
                    else if self.findKeywords(self.special, FLAG_NUMERAL, self.cKeywordQualifier):
                        continue
                    else if '=' in self and self[1] == '>':
                        self[2] = FLAG_PRAGMA
                    else if ':' in self and self.cKeywordQualifier(self[-1]):
                        let start = self.i
                        while self[-1] and self.cKeywordQualifier(self[-1]):
                            self.rewind(1)
                        while self[0] and self.i != start:
                            self[1] = FLAG_TYPE
                        self[1] = FLAG_PRAGMA
                    else if '<' in self:
                        self[1] = FLAG_TYPE
                        while self[0] and ('/' in self or self.cKeywordQualifier(self[0])):
                            self[1] = FLAG_TYPE
                    else if '>' in self:
                        self[1] = FLAG_TYPE
                    else if '"' in self:
                        self.paintSimpleString()
                    else if "'" in self:
                        self.paintSingleString()
                    else if '`' in self:
                        self[1] = FLAG_STRING
                        if self.paintJSFormatString(): return 2
                    else if self[0]:
                        self.skip()
            else if self.state == 1:
                if CHighlighter.paintCComment(self) == 1: return 1
                return 0
            else if self.state == 2:
                if self.paintJSFormatString(): return 2
                return 0
            return None
    return JavascriptHighlighter

let JavascriptHighlighter = makeit()
bind(JavascriptHighlighter)
