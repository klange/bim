from bim import highlighter, flags

let keywords = [
    "while","if","for","continue","return","break","switch","case","sizeof",
    "struct","union","typedef","do","default","else","goto",
    "alignas","alignof","offsetof","asm","__asm__",
    "public","private","class","using","namespace","virtual","override","protected",
    "template","typename","static_cast","throw"
]

let types = [
    "static","int","char","short","float","double","void","unsigned","volatile","const",
    "register","long","inline","restrict","enum","auto","extern","bool","complex",
    "uint8_t","uint16_t","uint32_t","uint64_t",
    "int8_t","int16_t","int32_t","int64_t","FILE",
    "ssize_t","size_t","uintptr_t","intptr_t","__volatile__",
    "constexpr"
]

let special = [
    "NULL",
    "stdin","stdout","stderr",
    "STDIN_FILENO","STDOUT_FILENO","STDERR_FILENO"
]

let FLAG_NONE = flags.FLAG_NONE
let FLAG_KEYWORD = flags.FLAG_KEYWORD
let FLAG_STRING = flags.FLAG_STRING
let FLAG_COMMENT = flags.FLAG_COMMENT
let FLAG_TYPE = flags.FLAG_TYPE
let FLAG_PRAGMA = flags.FLAG_PRAGMA
let FLAG_NUMERAL = flags.FLAG_NUMERAL
let FLAG_ERROR = flags.FLAG_ERROR
let FLAG_DIFFPLUS = flags.FLAG_DIFFPLUS
let FLAG_DIFFMINUS = flags.FLAG_DIFFMINUS
let FLAG_NOTICE = flags.FLAG_NOTICE
let FLAG_BOLD = flags.FLAG_BOLD
let FLAG_LINK = flags.FLAG_LINK
let FLAG_ESCAPE = flags.FLAG_ESCAPE

# matchAndPaint
# rewind

def paintCString(state):
    state.paint(1, FLAG_STRING)
    let last = None
    while state[0] != None:
        if last != '\\' and state[0] == '"':
            state.paint(1, FLAG_STRING)
            return
        else if state[0] == '\\' and state[1] in 'nr\\':
            state.paint(2, FLAG_ESCAPE)
            last = None
        else if state[0] == '\\' and state[1] in '01234567':
            state.paint(2, FLAG_ESCAPE)
            if state[0] in '01234567':
                state.paint(1, FLAG_ESCAPE)
                if state[0] in '01234567':
                    state.paint(1, FLAG_ESCAPE)
            last = None
        else if state[0] == '%':
            state.paint(1, FLAG_ESCAPE)
            if state[0] == '%':
                state.paint(1, FLAG_ESCAPE)
            else:
                while state[0] in '-#*0+': state.paint(1, FLAG_ESCAPE)
                while state.isdigit(state[0]): state.paint(1, FLAG_ESCAPE)
                if state[0] == '.':
                    state.paint(1, FLAG_ESCAPE)
                    if state[0] == '*': state.paint(1, FLAG_ESCAPE)
                    else: while state.isdigit(state[0]): state.paint(1, FLAG_ESCAPE)
                while state[0] in 'lz': state.paint(1, FLAG_ESCAPE)
                if state[0] in '"\\': continue
                state.paint(1, FLAG_ESCAPE)
        else if state[0] == '\\' and state[1] == 'x':
            state.paint(2, FLAG_ESCAPE)
            while state.isxdigit(state[0]): state.paint(1, FLAG_ESCAPE)
        else:
            last = state[0]
            state.paint(1, FLAG_STRING)

def paintCChar(state):
    state.paint(1, FLAG_NUMERAL)
    let last = None
    while state[0] != None:
        if last != '\\' and state[0] == "'":
            state.paint(1, FLAG_NUMERAL)
            return
        else if last == '\\' and state[0] == '\\':
            state.paint(1, FLAG_NUMERAL)
            last = None
        else:
            last = state[0]
            state.paint(1, FLAG_NUMERAL)

def paintCComment(state):
    let last = None
    while state[0] != None:
        if state.commentBuzzwords(): continue
        else if last == '*' and state[0] == '/':
            state.paint(1, FLAG_COMMENT)
            return 0
        else:
            last = state[0]
            state.paint(1, FLAG_COMMENT)
    return 1

def paintCPragma(state):
    while state[0] != None:
        if state[0] == '"':
            paintCString(state)
        else if state[0] == "'":
            paintCChar(state)
        else if state[0] == '\\' and state[1] == None:
            state.paint(1, FLAG_PRAGMA)
            return 2
        else if state.findKeywords(keywords, FLAG_KEYWORD, state.cKeywordQualifier):
            continue
        else if state.findKeywords(types, FLAG_TYPE, state.cKeywordQualifier):
            continue
        else if state[0] == '/' and state[1] == '/':
            state.paintComment()
            return None
        else if state[0] == '/' and state[1] == '*':
            if paintCComment(state) == 1: return 3
            continue
        else:
            state.paint(1, FLAG_PRAGMA)
    return 0

def paintCNumeral(state):
    if state[0] == '0' and (state[1] == 'x' or state[1] == 'X'):
        state.paint(2, FLAG_NUMERAL)
        while state.isxdigit(state[0]): state.paint(1, FLAG_NUMERAL)
    else if state[0] == '0' and state[1] == '.':
        state.paint(2, FLAG_NUMERAL)
        while state.isdigit(state[0]): state.paint(1, FLAG_NUMERAL)
        if state[0] == 'f': state.paint(1, FLAG_NUMERAL)
        return 0
    else if state[0] == '0':
        state.paint(1, FLAG_NUMERAL)
        while state[0] in '01234567': state.paint(1, FLAG_NUMERAL)
    else:
        while state.isdigit(state[0]): state.paint(1, FLAG_NUMERAL)
        if state[0] == '.':
            state.paint(1, FLAG_NUMERAL)
            while state.isdigit(state[0]): state.paint(1, FLAG_NUMERAL)
            if state[0] == 'f': state.paint(1, FLAG_NUMERAL)
            return 0
    while state[0] in 'uUlL': state.paint(1, FLAG_NUMERAL)
    return 0

@highlighter('c',extensions=('.c','.h','.cpp','.hpp','.c++','.h++','.cc','.hh'))
def syntax_c(state):
    let cond = state.state
    if cond <= 0:
        if state[0] == '#':
            for i in range(state.i):
                if state[-i-1] != ' ' and state[-i-1] != '\t':
                    state.skip()
                    return 0
            state.paint(1, FLAG_PRAGMA)
            while state[0] == ' ':
                state.paint(1, FLAG_PRAGMA)
            if state.matchAndPaint("include", FLAG_PRAGMA, state.cKeywordQualifier):
                while state[0] == ' ':
                    state.paint(1, FLAG_PRAGMA)
                if state[0] == '<':
                    state.paint(1, FLAG_STRING)
                    while state[0] != '>' and state[0] != None:
                        state.paint(1, FLAG_STRING)
                    if state[0] != None:
                        state.paint(1, FLAG_STRING)
            else if state.matchAndPaint("if", FLAG_PRAGMA, state.cKeywordQualifier):
                if state[0] == ' ' and state[1] == '0' and state[2] == None:
                    state.rewind(4)
                    state.paint(-1, FLAG_COMMENT)
                    return 4
            else if state.matchAndPaint("else", FLAG_PRAGMA, state.cKeywordQualifier):
                # Do nothing?
            return paintCPragma(state)
        else if state[0] == '/' and state[1] == '/':
            state.paintComment()
        else if state[0] == '/' and state[1] == '*':
            state.paint(2, FLAG_COMMENT)
            return paintCComment(state)
        else if state.findKeywords(keywords, FLAG_KEYWORD, state.cKeywordQualifier):
            return 0
        else if state.findKeywords(types, FLAG_TYPE, state.cKeywordQualifier):
            return 0
        else if state.findKeywords(special, FLAG_NUMERAL, state.cKeywordQualifier):
            return 0
        else if state[0] == '"':
            paintCString(state)
            return 0
        else if state[0] == "'":
            paintCChar(state)
            return 0
        else if not state.cKeywordQualifier(state[-1]) and state.isdigit(state[0]):
            paintCNumeral(state)
            return 0
        else if state[0] != None:
            state.skip()
            return 0
    else if cond == 1:
        return paintCComment(state)
    else if cond == 2:
        return paintCPragma(state)
    else if cond == 3:
        if paintCComment(state) == 1:
            return 3
        return paintCPragma(state)
    else:
        while state[0] == ' ' or state[0] == '\t': state.paint(1, FLAG_COMMENT)
        if state[0] == '#':
            state.paint(1, FLAG_COMMENT)
            while state[0] == ' ' or state[0] == '\t': state.paint(1, FLAG_COMMENT)
            if state.matchAndPaint("if", FLAG_COMMENT, state.cKeywordQualifier):
                state.paint(-1, FLAG_COMMENT)
                return state.state + 1
            else if state.matchAndPaint("else", FLAG_COMMENT, state.cKeywordQualifier) or state.matchAndPaint("elif", FLAG_COMMENT, state.cKeywordQualifier):
                state.paint(-1, FLAG_COMMENT)
                if state.state == 4: return 0
                return state.state
            else if state.matchAndPaint("endif", FLAG_COMMENT, state.cKeywordQualifier):
                state.paint(-1, FLAG_COMMENT)
                if state.state == 4: return 0
                return state.state - 1
            else:
                state.paint(-1, FLAG_COMMENT)
                return state.state
        else:
            state.paint(-1, FLAG_COMMENT)
            return state.state
    return None
