from syntax import Highlighter, bind
from syntax.doxygen import tryDoxygenComment

def makeit():
    let FLAG_NONE = Highlighter.FLAG_NONE
    let FLAG_KEYWORD = Highlighter.FLAG_KEYWORD
    let FLAG_STRING = Highlighter.FLAG_STRING
    let FLAG_COMMENT = Highlighter.FLAG_COMMENT
    let FLAG_TYPE = Highlighter.FLAG_TYPE
    let FLAG_PRAGMA = Highlighter.FLAG_PRAGMA
    let FLAG_NUMERAL = Highlighter.FLAG_NUMERAL
    let FLAG_ERROR = Highlighter.FLAG_ERROR
    let FLAG_DIFFPLUS = Highlighter.FLAG_DIFFPLUS
    let FLAG_DIFFMINUS = Highlighter.FLAG_DIFFMINUS
    let FLAG_NOTICE = Highlighter.FLAG_NOTICE
    let FLAG_BOLD = Highlighter.FLAG_BOLD
    let FLAG_LINK = Highlighter.FLAG_LINK
    let FLAG_ESCAPE = Highlighter.FLAG_ESCAPE
    let FLAG_EXTRA = Highlighter.FLAG_EXTRA
    let FLAG_SPECIAL = Highlighter.FLAG_SPECIAL
    let FLAG_UNDERLINE = Highlighter.FLAG_UNDERLINE

    class CHighlighter(Highlighter):
        name = 'c'
        extensions = ('.c','.h','.cpp','.hpp','.c++','.h++','.cc','.hh')

        doxygenDocstrings = False

        keywords = [
            "while","if","for","continue","return","break","switch","case","sizeof",
            "struct","union","typedef","do","default","else","goto",
            "alignas","alignof","offsetof","asm","__asm__",
            "public","private","class","using","namespace","virtual","override","protected",
            "template","typename","static_cast","throw"
        ]

        types = [
            "static","int","char","short","float","double","void","unsigned","volatile","const",
            "register","long","inline","restrict","enum","auto","extern","bool","complex",
            # stdint stuff
            "uint8_t","uint16_t","uint32_t","uint64_t",
            "int8_t","int16_t","int32_t","int64_t",
            "ssize_t","size_t","uintptr_t","intptr_t",
            # Extra stuff
            "constexpr","FILE","__volatile__",
            # sys/types stuff
            "gid_t","uid_t","dev_t","ino_t","mode_t","caddr_t","off_t","time_t","pid_t",
        ]

        special = [
            "NULL",
            "stdin","stdout","stderr",
            "STDIN_FILENO","STDOUT_FILENO","STDERR_FILENO"
        ]

        preprocessor_base_state = 5

        def paintCString(self):
            let last = None
            while None not in self:
                if last != '\\' and '"' in self:
                    self[1] = FLAG_STRING
                    return 0
                else if '\\' in self and not self[1]:
                    self[1] = FLAG_ESCAPE
                    return 4
                else if '\\' in self and self[1] in 'abfnrtv?\\':
                    self[2] = FLAG_ESCAPE
                    last = None
                else if '\\'  in self and self[1] in '01234567':
                    self[2] = FLAG_ESCAPE
                    if '01234567' in self:
                        self[1] = FLAG_ESCAPE
                        if '01234567' in self:
                            self[1] = FLAG_ESCAPE
                    last = None
                else if '%' in self:
                    self[1] = FLAG_ESCAPE
                    if '%' in self:
                        self[1] = FLAG_ESCAPE
                    else:
                        while '-#*0+' in self: self[1] = FLAG_ESCAPE
                        while self.isdigit(self[0]): self[1] = FLAG_ESCAPE
                        if '.' in self:
                            self[1] = FLAG_ESCAPE
                            if '%'  in self: self[1] = FLAG_ESCAPE
                            else: while self.isdigit(self[0]): self[1] = FLAG_ESCAPE
                        while 'lz' in self: self[1] = FLAG_ESCAPE
                        if '"\\' in self: continue
                        self[1] = FLAG_ESCAPE
                else if '\\' in self and self[1] == 'x':
                    self[2] = FLAG_ESCAPE
                    while self.isxdigit(self[0]): self[1] = FLAG_ESCAPE
                else if self.doxygenDocstrings and tryDoxygenComment(self, FLAG_STRING):
                    continue
                else:
                    last = self[0]
                    self[1] = FLAG_STRING
            return 0

        def paintCChar(self):
            self[1] = FLAG_NUMERAL
            let last = None
            while None not in self:
                if last != '\\' and "'" in self:
                    self[1] = FLAG_NUMERAL
                    return
                else if last == '\\' and '\\' in self:
                    self[1] = FLAG_NUMERAL
                    last = None
                else:
                    last = self[0]
                    self[1] = FLAG_NUMERAL

        def paintCComment(self):
            let last = None
            while None not in self:
                if self.commentBuzzwords(): continue
                if tryDoxygenComment(self): continue
                else if last == '*' and '/' in self:
                    self[1] = FLAG_COMMENT
                    return 0
                else:
                    last = self[0]
                    self[1] = FLAG_COMMENT
            return 1

        def paintCPragma(self):
            while None not in self:
                if '"' in self:
                    self[1] = FLAG_STRING
                    let result = self.paintCString()
                    if result != 0: return result
                else if "'" in self:
                    self.paintCChar()
                else if '\\' in self and self[1] == None:
                    self[1] = FLAG_PRAGMA
                    return 2
                else if self.findKeywords(self.keywords, FLAG_KEYWORD, self.cKeywordQualifier):
                    continue
                else if self.findKeywords(self.types, FLAG_TYPE, self.cKeywordQualifier):
                    continue
                else if '/' in self and self[1] == '/':
                    self.paintComment()
                    return None
                else if '/' in self and self[1] == '*':
                    if self.paintCComment() == 1: return 3
                    continue
                else:
                    self[1] = FLAG_PRAGMA
            return 0

        def paintCNumeral(self):
            if '0' in self and (self[1] == 'x' or self[1] == 'X'):
                self[2] = FLAG_NUMERAL
                while self.isxdigit(self[0]): self[1] = FLAG_NUMERAL
            else if '0' in self and self[1] == '.':
                self[2] = FLAG_NUMERAL
                while self.isdigit(self[0]): self[1] = FLAG_NUMERAL
                if 'f' in self: self[1] = FLAG_NUMERAL
                return 0
            else if '0' in self:
                self[1] = FLAG_NUMERAL
                while '01234567' in self: self[1] = FLAG_NUMERAL
            else:
                while self.isdigit(self[0]): self[1] = FLAG_NUMERAL
                if '.' in self:
                    self[1] = FLAG_NUMERAL
                    while self.isdigit(self[0]): self[1] = FLAG_NUMERAL
                    if 'f' in self: self[1] = FLAG_NUMERAL
                    return 0
            while 'uUlL' in self: self[1] = FLAG_NUMERAL
            return 0

        def calculate(self):
            let cond = self % 0
            if cond <= 0:
                while None not in self:
                    if '#' in self:
                        for i in range(self.i):
                            if self[-i-1] != ' ' and self[-i-1] != '\t':
                                self.skip()
                                continue
                        self[1] = FLAG_PRAGMA
                        while ' ' in self:
                            self[1] = FLAG_PRAGMA
                        if self.matchAndPaint("include", FLAG_PRAGMA, self.cKeywordQualifier):
                            while ' ' in self:
                                self[1] = FLAG_PRAGMA
                            if '<' in self:
                                self[1] = FLAG_STRING
                                while '>' not in self and None not in self:
                                    self[1] = FLAG_STRING
                                if None not in self:
                                    self[1] = FLAG_STRING
                        else if self.matchAndPaint("if", FLAG_PRAGMA, self.cKeywordQualifier):
                            if ' ' in self and self[1] == '0' and self[2] == None:
                                self[2] = FLAG_COMMENT
                                self.rewind(6)
                                self[-1] = FLAG_COMMENT
                                return self.preprocessor_base_state
                        else if self.matchAndPaint("else", FLAG_PRAGMA, self.cKeywordQualifier):
                            # Do nothing?
                        return self.paintCPragma()
                    else if '/' in self and self[1] == '/':
                        self.paintComment()
                    else if '/' in self and self[1] == '*':
                        self[2] = FLAG_COMMENT
                        return self.paintCComment()
                    else if self.findKeywords(self.keywords, FLAG_KEYWORD, self.cKeywordQualifier):
                        continue
                    else if self.findKeywords(self.types, FLAG_TYPE, self.cKeywordQualifier):
                        continue
                    else if self.findKeywords(self.special, FLAG_NUMERAL, self.cKeywordQualifier):
                        continue
                    else if '"' in self:
                        self[1] = FLAG_STRING
                        return self.paintCString()
                    else if "'" in self:
                        self.paintCChar()
                    else if not self.cKeywordQualifier(self[-1]) and self.isdigit(self[0]):
                        self.paintCNumeral()
                    else:
                        self.skip()
            else if cond == 1:
                return self.paintCComment()
            else if cond == 2:
                return self.paintCPragma()
            else if cond == 3:
                if self.paintCComment() == 1:
                    return 3
                return self.paintCPragma()
            else if cond == 4:
                return self.paintCString()
            else:
                while ' ' in self or '\t' in self: self[1] = FLAG_COMMENT
                if '#' in self:
                    self[1] = FLAG_COMMENT
                    while ' ' in self or '\t' in self: self[1] = FLAG_COMMENT
                    if self.findKeywords(["if","ifdef","ifndef"], FLAG_COMMENT, self.cKeywordQualifier):
                        self[-1] = FLAG_COMMENT
                        return self.state + 1
                    else if self.findKeywords(["else","elif"], FLAG_COMMENT, self.cKeywordQualifier):
                        self[-1] = FLAG_COMMENT
                        if self.state == self.preprocessor_base_state: return 0
                        return self.state
                    else if self.matchAndPaint("endif", FLAG_COMMENT, self.cKeywordQualifier):
                        self[-1] = FLAG_COMMENT
                        if self.state == self.preprocessor_base_state: return 0
                        return self.state - 1
                    else:
                        self[-1] = FLAG_COMMENT
                        return self.state
                else:
                    self[-1] = FLAG_COMMENT
                    return self.state
            return None
    return CHighlighter

let CHighlighter = makeit()
bind(CHighlighter)
