let doxygen_keywords_at = [
    "@author","@brief","@class","@short","@retval",
    "@since","@return","@returns","@throws","@bug",
    "@version","@deprecated","@attention","@note",
]

def tryDoxygenComment(b,defaultflag=b.FLAG_COMMENT):
    let doxygen_word_commands = {
        '@param': b.FLAG_TYPE,
        '@exception': b.FLAG_PRAGMA,
        '@def': b.FLAG_TYPE,
        '@see': b.FLAG_LINK,
        '@p': b.FLAG_TYPE,
        '@c': b.FLAG_NONE,
        '@file': b.FLAG_LINK,
        '@memberof': b.FLAG_TYPE,
        '@extends': b.FLAG_TYPE,
        '@mainpage': b.FLAG_STRING,
        '@section': b.FLAG_BOLD,
        '@subsection': b.FLAG_BOLD,
        '@package': b.FLAG_TYPE,
        '@ref': b.FLAG_LINK,
    }
    if b[0] == '@':
        def qualifier(c):
            if isinstance(c,int):
                if c > 0: c = chr(c)
                else: return False
            return b.isalnum(c) or c in '_@'
        if not b.findKeywords(doxygen_keywords_at, b.FLAG_ESCAPE, qualifier):
            for keyword, flag in doxygen_word_commands.items():
                if b.matchAndPaint(keyword, b.FLAG_ESCAPE, qualifier):
                    while b[0] == ' ': b.skip()
                    while b[0] and b[0] != ' ': b.paint(1, flag)
                    return True
            b.paint(1, defaultflag)
        return True
    return False

